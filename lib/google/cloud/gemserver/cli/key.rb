# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "google/cloud/gemserver"
require "gemstash"
require "stringio"
require "fileutils"
require "yaml"

module Google
  module Cloud
    module Gemserver
      class CLI
        ##
        # # Key
        #
        # Manages the creation and deletion of a key used to push gems to the
        # gemserver and download them.
        #
        class Key
          ##
          # A mapping from gemserver permissions to gemstash permissions.
          MAPPING = {
            "write" => %w[push yank],
            "read"  => %w[fetch]
          }.freeze

          ##
          # Aliases for read and write permissions.
          ALL         = ["both", "all", "", nil].freeze

          ##
          # Path to the credentials file checked when pushing gems to the gem
          # server (or any endpoint).
          GEM_CREDS   = File.expand_path("~/.gem")

          ##
          # The length of a key generated by gemstash.
          KEY_LENGTH  = 34

          ##
          # Creates a key with given permissions.
          #
          # @param permissions [String] The permissions for a key. Optional.
          #
          # @return [String]
          def self.create_key permissions = nil
            mapped = map_perms permissions
            args = base_args.concat mapped
            output = capture_stdout { Gemstash::CLI.start args }
            key = parse_key(output).chomp
            puts "Created key: #{key}"
            key
          end

          ##
          # Deletes a given key.
          #
          # @param [String] key The key to delete.
          def self.delete_key key
            args = [
              "--remove",
              "--key=#{key}"
            ]
            Gemstash::CLI.start base_args.concat(args)
            puts "Deleted key: #{key}"
            true
          end

          ##
          # @private Maps read/write permissions to the permissions the
          # gemstash gem uses.
          #
          # @param [String] perms The permissions to be mapped.
          def self.map_perms perms
            if perms == "write"
              MAPPING["write"]
            elsif ALL.include? perms
              MAPPING["write"] + MAPPING["read"]
            else
              MAPPING["read"]
            end
          end

          ##
          # @private Temporarily routes stdout to a temporary variable such
          # that stdout from gemstash is captured.
          #
          # @return [String]
          def self.capture_stdout
            old_stdout = $stdout
            $stdout = StringIO.new
            yield
            $stdout.string
          ensure
            $stdout = old_stdout
          end

          ##
          # @private The arguments passed to every Gemstash key generation
          # command.
          #
          # @return [Array]
          def self.base_args
            [
              "authorize",
              "--config-file=#{Configuration.new.config_path}"
            ]
          end

          ##
          # @private Outputs important information to the user on how they
          # should set up their keys so pushing/installing gems works as
          # intended.
          def self.output_key_info
            puts "Note: remember to add this key to ~/.gem/credentials" \
              " so that you are able to push gems to the gemserver."
            puts "Note: remember to add this key to your bundle config so " \
              "that `bundle install` works for private gems (bundle config" \
              " http://my-gemserver.appspot.com/private/ my-key"
          end

          ##
          # Parses the key from output generated from the corresponding key
          # creation command in gemstash.
          #
          # @param [String] output The output to parse.
          def self.parse_key output
            i = output.index(":")
            output[i+2..i+KEY_LENGTH]
          end

          private_class_method :map_perms
          private_class_method :capture_stdout
          private_class_method :parse_key
        end
      end
    end
  end
end
